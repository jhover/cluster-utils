#!/usr/bin/env python
#
# qacct -j -d 1 -o hover
#  jobnum  jobname  wallclock  slots   maxvmem exit_status


import argparse
import logging
import os
import pwd
import subprocess
import sys

def get_username():
    return pwd.getpwuid( os.getuid() )[ 0 ]

def parse_output(lines):
    lod = []
    current = None
    for line in lines:
        if line.startswith("======="):
            if current is not None:
                lod.append(current)
            current = {}
        else:
            key = line[0:13].strip()
            value = line[13:].strip()
            #print(f"{key} = {value}")
            if key == "jobnumber":
                current['jobnumber'] = value
            elif key == "jobname":
                current['jobname'] = value
            elif key == "exit_status":
                current["exit_status"] = value
            elif key == "slots":
                current['slots'] = value
            elif key == "wallclock":
                current["wallclock"] = value
            elif key == "start_time":
                current["start_time"] = value
            elif key == "end_time":
                current["end_time"] = value            
            elif key == "maxvmem":
                current["maxvmem"] = value
            elif key == "pe_taskid":
                current["pe_taskid"] = value
            elif key == "submit_cmd":
                current["submit_cmd"] = value

    return lod    


def get_history(days=1, user=get_username()):
    cmd = f"qacct -j -d {days} -o {user}"
    result = subprocess.check_output( cmd, shell=True, text=True )
    lines = result.split('\n')
    joblist = parse_output(lines)
    #print(f"got {len(info)} jobs")
    joblist.sort(key=lambda x: int(x['jobnumber']))
    joblist.reverse()
    return joblist


def printjoblist(joblist):
#    fields = ["jobnumber", "jobname", "pe_taskid", "ru_wallclock", "slots", "maxvmem", "exit_status","submit_cmd"  ]
    fields = [ ("jobnumber", 10),
               ("jobname", 16),
               ( "pe_taskid", 6),
               ( "start_time", 25),
               ("end_time", 25 ),
               ("wallclock", 10),
               ( "slots", 4 ),
               ( "maxvmem", 10),
               ( "exit_status", 6 )
               ]
    slist = []    
    for jobdict in joblist:
        s=""
        for (f, w) in fields:
           value = jobdict[f]
           value = value[:(w -1)]  # strip it if longer than field. 
           s += f"{value}" 
           pad = ' ' * (w - len(value))
           s += pad
        slist.append(s)
    
    out = '\n'.join(slist)
    out = out + '\n'
    return out


if __name__ == '__main__':
    FORMAT='%(asctime)s (UTC) [ %(levelname)s ] %(filename)s:%(lineno)d %(name)s.%(funcName)s(): %(message)s'
    logging.basicConfig(format=FORMAT)
    parser = argparse.ArgumentParser()
      
    parser.add_argument('-d', '--debug', 
                        action="store_true", 
                        dest='debug', 
                        help='debug logging')

    parser.add_argument('-v', '--verbose', 
                        action="store_true", 
                        dest='verbose', 
                        help='verbose logging')

    parser.add_argument('-D','--days', 
                        metavar='days', 
                        type=int,
                        default=7, 
                        help='days previous to query')
   
    args= parser.parse_args()    
    
    joblist = get_history(days=args.days)
    out = printjoblist(joblist)
    try:
        sys.stdout.write(out)
    except IOError as e:
        pass
    

    
    