#!/usr/bin/env python

"""
Author: Nathan Fox <nchristopherfox@gmail.com>
Modified: 2021-06-25

NOTE: This does not handle array jobs well.
"""

import subprocess


def get_constants(usage, memorystats):
    """Get formatting constants.

    Args:
        usage: bool. If True, add wall clock and max mem usage.

    Returns:
        Tuple of 3. Header string (including horizontal span separator),
        list of header fields and column widths, dict to translate
        qstat job states to qqstat job states.
    """
    header_widths = [
        ('owner', 8),
        ('job ID', 10),
        ('job name', 25),
        ('job state', 13),
        ('start(r)/submit(q)', 20),
        ('memory', 8),
        ('threads', 7)
    ]
    memory_labels = {'maxvmem': 'max virt_mem',
                     'maxrss': 'max phys_mem'}
    if usage:
        header_widths += [('wall clock', 12)]
        for memstat in memorystats:
            header_widths += [(memory_labels[memstat], 11)]
    header = '  '.join([f'{name:{width}s}' for name, width in header_widths])
    header = header + '\n' + '-' * len(header)
    run_state_ref = {
        'r': 'running',
        't': 'transferring',
        'R': 'restarting',
        's': 'suspended',
        'S': 'suspended',
        'T': 'T',
        'w': 'waiting',
        'h': 'on hold',
        'e': 'error',
        'q': 'queued',
        'qw': 'queued/wait'
    }
    return header, header_widths, run_state_ref, memory_labels


def get_jobs():
    """Get the list of job_ids returned by qstat.

    Returns:
        Tuple of two lists: job_ids and run_states as strings.

    Raises:
        RuntimeError: If qstat system call fails.
    """
    qstat = subprocess.run(['qstat'], capture_output=True, text=True)
    if qstat.returncode != 0:
        raise RuntimeError('qstat returned a non-zero exit code: '
                           f'{qstat.returncode}\n\n{qstat.stderr}')
    output = [line for line in qstat.stdout.splitlines() if line != '']
    if not output:
        return [], []
    del output[0]
    if ''.join(list(set(list(output[0])))) == '-':
        del output[0]
    job_ids = [line.split()[0].strip() for line in output]
    run_states = [line.split()[4].strip() for line in output]
    return job_ids, run_states


def get_job_data(job_id):
    """Get data for specific job.

    Args:
        job_id: str. ID of the job to query.

    Returns:
        dict of data for job_id, keyed by qstat field name.

    Raises:
        RuntimeError: If the job-specific qstat system call fails.
    """
    qstat = subprocess.run(['qstat', '-j', f'{job_id}'],
                           capture_output=True, text=True)
    if qstat.returncode != 0:
        raise RuntimeError(f'\"{" ".join(qstat.args)}\" returned a '
                           'non-zero exit code: '
                           f'{qstat.returncode}\n\n{qstat.stderr}')
    job_data = qstat.stdout.splitlines()
    if ''.join(list(set(list(job_data[0])))) == '=':
        del job_data[0]
    # Concatenate env_list field that includes newlines
    start_index = -1
    end_index = -1
    for i, rec in enumerate(job_data):
        if rec.startswith('env_list'):
            start_index = i
    for i, rec in enumerate(job_data):
        if i <= start_index:
            continue
        elif rec.startswith(' ') or rec.startswith('}'):
            continue
        else:
            end_index = i
            break
    job_data = (job_data[:start_index]
                + [' '.join(job_data[start_index:end_index])]
                + job_data[end_index:])
    # Find column in which values begin
    job_number_record = ''
    for rec in job_data:
        if rec.startswith('job_number'):
            job_number_record = rec
            break
    value_index = -1
    for i, c in enumerate(job_number_record):
        if c.isnumeric():
            value_index = i
            break
    if value_index == -1:
        job_data_text = '\n'.join(job_data)
        raise AssertionError(f'No "job_number" field in "qstat -j {job_id}"'
                             f'\n\nRecord:\n{job_data_text}')
    temp = {}
    for jdata in job_data:
        name = jdata[:value_index].split()[0].strip(' \t\n:')
        value = jdata[value_index:].strip()
        temp[name] = value
    job_data = temp
    return job_data


def build_output_record(job_data, run_state, usage, memorystats):
    """Build output line for a job.

    Args:
        job_data: dict. Data for a specific job, keyed by qstat field name.
        run_state: str. run_state of the job with job_data
        usage: bool. If True, add wall clock and max mem usage.

    Returns:
        String of the job data, formatted as a single pretty line.
    """
    (header, header_widths,
     run_state_ref, memory_labels) = get_constants(usage, memorystats)
    # Choose time field and format job state
    if 'start_time' in job_data:
        time_entry = job_data['start_time'].split('.')[0]
    elif 'submission_time' in job_data:
        time_entry = job_data['submission_time'].split('.')[0]
    else:
        time_entry = ''
    if run_state not in run_state_ref:
        run_state = run_state  # No effect; here for readability
    else:
        run_state = run_state_ref[run_state]

    # Build output record
    newr = {}
    for jd, newrec in [('owner', 'owner'), ('job_number', 'job ID'),
                       ('job_name', 'job name'), ('job_state', 'job state')]:
        if jd in job_data:
            newr[newrec] = job_data[jd]
        else:
            newr[newrec] = ''
    newr['job state'] = run_state
    newr['start(r)/submit(q)'] = time_entry
    if 'parallel' in job_data:
        newr['threads'] = job_data['parallel'].split()[-1]
    else:
        newr['threads'] = '1'
    if 'hard' in job_data:
        mem_value = []
        mem_text = job_data['hard'].replace('m_mem_free=', '')
        for i, c in enumerate(mem_text):
            if c.isnumeric() or c == '.':
                mem_value.append(c)
            else:
                break
        if newr['threads'] == '':
            mem_value = float(''.join(mem_value))
        else:
            mem_value = float(''.join(mem_value)) * float(newr['threads'])
        newr['memory'] = f'{mem_value:.1f} {mem_text[i:]}'
    else:
        newr['memory'] = ''
    if usage:
        if newr['job state'] == 'running':
            runstats = {}
            for rs in job_data['usage'].split(', '):
                stat, value = rs.split('=')
                runstats[stat] = value
            newr['wall clock'] = runstats['wallclock']
            for memstat in memorystats:
                if memstat not in runstats:
                    newr[memstat] = ''
                elif runstats[memstat] == 'N/A':
                    newr[memory_labels[memstat]] = ''
                else:
                    mem_value = []
                    for i, c in enumerate(runstats[memstat]):
                        if c.isnumeric() or c == '.':
                            mem_value.append(c)
                        else:
                            break
                    mem_value = float(''.join(mem_value))
                    newr[memory_labels[memstat]] = (f'{mem_value:.1f} '
                                                    f'{runstats[memstat][i:]}')
        else:
            newr['wall clock'] = ''
            for memstat in memorystats:
                newr[memory_labels[memstat]] = ''
    newline = [f'{newr[name]:{width}s}' for name, width in header_widths]
    newline = '  '.join(newline)
    return newline


def main(usage, memorystats=['maxvmem'], njobs=0):
    """Replacement for UGE qstat.

    UGE qstat as a summary without args is poorly formatted
    and somewhat unhelpful. This is a drop in for "qstat". It
    does not support anything beyond vanilla "qstat" without
    any arguments or flags. Includes useful fields and ignores
    unimportant fields (in the author's opinion). The output is
    also not as wide as qstat output. Without usage stats,
    it is 91 characters wide, growing to 109 with usage stats.
    qstat output is 147 characters wide.

    Args:
        usage: bool. If True, add wall clock and max mem usage.
        memorystats: list. Indicates the memory usage stats to be
            displayed if usage is True.
        njobs: int. The maximum number of jobs to display.
            A value <= 0 will return all available jobs.
    """
    if memorystats == ['both']:
        memorystats = ['maxvmem', 'maxrss']
    (header, header_widths,
     run_state_ref, memory_labels) = get_constants(usage, memorystats)
    job_ids, run_states = get_jobs()
    if len(job_ids) == 1:
        return  # No qstat output
    try:
        print(header)
    except BrokenPipeError:
        return
    if njobs <= 0:
        njobs = len(job_ids)
    for i, (jid, run_state) in enumerate(zip(job_ids, run_states)):
        if i >= njobs:
            return
        job_data = get_job_data(jid)
        newline = build_output_record(job_data, run_state, usage, memorystats)
        try:
            print(newline)
        except BrokenPipeError:
            return


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--usage', action='store_true',
                        help='Includes current runtime information, e.g. '
                             'wall clock, max memory.')
    parser.add_argument('-m', '--memorystats', default=['maxvmem'], nargs=1,
                        choices=['maxvmem', 'maxrss', 'both'],
                        help='If --usage is passed, the memory runtime '
                             'statistics to be displayed. Can be \'maxvmem\', '
                             '\'maxrss\', or \'both\'. maxvmem refers to '
                             'virtual memory usage; maxrss refers to '
                             'physical memory usage. Ignored if --usage is '
                             'not passed.')
    parser.add_argument('-n', '--njobs', default=0, type=int,
                        help='Maximum number of jobs to display. Default is '
                             'all jobs. A number <= 0 will default.')
    args = parser.parse_args()
    main(args.usage, args.memorystats, args.njobs)
